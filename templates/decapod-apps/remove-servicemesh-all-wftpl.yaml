apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: remove-servicemesh-all
  namespace: argo
spec:
  entrypoint: remove-start
  arguments:
    parameters:
    - name: cluster_id
      value: ""
    - name: app_prefix
      value: ""
    - name: filter
      value: "app=service-mesh"

  templates:
  #=========================================================
  # Template Pipeline
  #=========================================================
  - name: remove-start
    steps:
    - - name: disableAutoSync
        template: disableAutoSync

    # Delete CRs first so that it doesn't hang
    # due to earlier service-account deletion. 
    - - name: removeFluentbitCR
        template: removeFluentbitCR
        arguments:
          parameters:
          - name: namespace
            value:  "lma"

    - - name: remove-service-mesh-argocd-apps
        templateRef:
          name: delete-apps
          template: DeleteAppsByLabel

    - - name: delete-namespace
        template: delete-namespace-list
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "namespace": "istio-ingress" },
                { "namespace": "istio-system" }
              ]
  
  #=========================================================
  # Template Definition
  #=========================================================
  - name: disableAutoSync
    container:
      name: disable-auto-sync
      image: harbor-cicd.taco-cat.xyz/tks/argocd-cli:v2.2.5
      command:
        - /bin/bash
        - '-c'
        - |
          # Login to Argo CD server
          ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
          --password $ARGO_PASSWORD

          app_list=$(./argocd app list -l {{workflow.parameters.filter}} --output name)
          echo -e "app list:\n $app_list"
          if [[ $? -eq 0 && -n $app_list ]]; then
            # Disable auto-sync
            echo "Disabling auto-sync of service-mesh app_group.."
            echo "$app_list" | xargs -I '{}' ./argocd app set '{}' --sync-policy none
          fi
      envFrom:
        - secretRef:
            name: "decapod-argocd-config"

  - name: removeFluentbitCR
    inputs:
      parameters:
        - name: namespace
    container:
      name: remove-fluentbit-cr
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          echo "Deleting fluentbit CR..."

          kube_params=""

          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig

            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          kubectl $kube_params delete fluentbit --all -n {{inputs.parameters.namespace}} || true
          kubectl $kube_params delete fluentbitconfig --all -n {{inputs.parameters.namespace}} || true

  - name: delete-argocd-app
    inputs:
      parameters:
      - name: app_group
    container:
      name: delete-argocd-app
      image: harbor-cicd.taco-cat.xyz/tks/argocd:latest
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }
          ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
          --password $ARGO_PASSWORD

          app_label=""
          if [[ -n "{{ workflow.parameters.app_prefix }}" ]]; then
            app_label+="-l app={{ workflow.parameters.app_prefix }}-service-mesh"
          fi

          ./argocd app list -p $APP_NAME $app_label -o name | xargs ./argocd app delete -y
          
          log "INFO" "deleting argocd app"
      envFrom:
      - secretRef:
          name: decapod-argocd-config
      env:
      - name: APP_NAME
        value: "{{inputs.parameters.app_group}}"
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2
  
  - name: delete-finalizer-app
    inputs:
      parameters:
      - name: namespace
    container:
      name: delete-finalizer-app
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          kube_params=""
          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig
            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          app_prefix=""
          if [[ -n "{{ workflow.parameters.app_prefix }}" ]]; then
            app_prefix+="{{ workflow.parameters.app_prefix }}-"
          fi
          
          kubectl patch app ${app_prefix}servicemesh-kiali-resource -n argo --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
          kubectl patch app ${app_prefix}servicemesh-gateway -n argo --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
          kubectl patch app ${app_prefix}servicemesh-controlplane -n argo --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
          kubectl $kube_params patch kialis kiali -n ${NAMESPACE} --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
          
          log "INFO" "argocd apps and kialis finalizers successfully deleted."
      env:
      - name: NAMESPACE
        value: '{{inputs.parameters.namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: delete-kubernetes-resources
    inputs:
      parameters:
      - name: component_name
      - name: component_type
    container:
      name: delete-kubernetes-resources
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          kube_params=""
          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig
            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }
          function deleteGateway() {
            log "INFO" "deleteGateway() called!"
            log "INFO" "REVISION = [${REVISION}]"
            log "INFO" "COMPONENT_NAME = [${COMPONENT_NAME}]"
            log "INFO" "NAMESPACE = [${NAMESPACE}]"
            LABELS="istio.io/rev=${REVISION},operator.istio.io/component=IngressGateways"
            kubectl $kube_params patch istiooperators ${COMPONENT_NAME}-${REVISION} -n ${NAMESPACE} --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
            kubectl $kube_params delete istiooperators ${COMPONENT_NAME}-${REVISION} -n ${NAMESPACE}
            kubectl $kube_params delete deployments -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete services -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete hpa -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete poddisruptionbudgets -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete serviceaccounts -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete rolebindings -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete roles -n ${NAMESPACE} -l ${LABELS}
          }
          function deleteControlplane() {
            log "INFO" "deleteControlplane() called!"
            log "INFO" "REVISION = [${REVISION}]"
            log "INFO" "COMPONENT_NAME = [${COMPONENT_NAME}]"
            log "INFO" "NAMESPACE = [${NAMESPACE}]"
            LABELS="istio.io/rev=${REVISION},operator.istio.io/component=Pilot"
            kubectl $kube_params patch istiooperators ${COMPONENT_NAME}-${REVISION} -n ${NAMESPACE} --type json -p '[{ "op": "remove", "path": "/metadata/finalizers" }]'
            kubectl $kube_params delete istiooperators ${COMPONENT_NAME}-${REVISION} -n ${NAMESPACE}
            kubectl $kube_params delete deployments -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete services -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete hpa -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete configmaps -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete poddisruptionbudgets -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete envoyfilters -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete mutatingwebhookconfigurations -l ${LABELS}
            kubectl $kube_params delete serviceaccounts -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete rolebindings -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete roles -n ${NAMESPACE} -l ${LABELS}
            kubectl $kube_params delete clusterrolebindings -l ${LABELS}
            kubectl $kube_params delete clusterroles -l ${LABELS}
          }
          # delete Kubernetes resources
          if [[ ! -z "$COMPONENT_NAME" ]]; then
            if [[ ${COMPONENT_TYPE} =~ controlplane ]]; then
              log "INFO" "delete istio Controlplane"
              deleteControlplane
            elif [[ ${COMPONENT_TYPE} =~ gateway ]]; then
              log "INFO" "delete istio Gateway"
              deleteGateway
            else
              log "ERROR" "${COMPONENT_TYPE} does'nt exist."
              exit 1
            fi
          fi

          log "INFO" "${COMPONENT_NAME} successfully deleted."
      env:
      - name: COMPONENT_NAME
        value: '{{inputs.parameters.component_name}}'
      - name: COMPONENT_TYPE
        value: '{{inputs.parameters.component_type}}'
      - name: REVISION
        value: '{{workflow.parameters.revision}}'
      - name: NAMESPACE
        value: '{{workflow.parameters.namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: delete-namespace
    inputs:
      parameters:
      - name: namespace
    container:
      name: delete-namespace
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }
          
          kube_params=""
          if [[ -n "{{workflow.parameters.cluster_id}}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig
            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          kubectl $kube_params delete ns ${NAMESPACE}
          log "INFO" "${NAMESPACE} successfully deleted."

      env:
      - name: NAMESPACE
        value: '{{inputs.parameters.namespace}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: delete-namespace-list
    inputs:
      parameters:
      - name: list
    steps:
    - - name: delete-namespace
        template: delete-namespace
        arguments:
          parameters:
          - {name: namespace, value: "{{item.namespace}}"}
        withParam: "{{inputs.parameters.list}}"
