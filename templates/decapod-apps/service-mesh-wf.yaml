apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: service-mesh
  namespace: argo
spec:
  entrypoint: deploy-start
  arguments:
    parameters:
    - name: site_name
      value: decapod-reference
    - name: manifest_repo_url
      value: 'https://github.com/openinfradev/decapod-manifests'
    - name: revision
      value: main
    - name: cluster_id
      value: ""
    - name: app_prefix
      value: ""

  templates:
  #=========================================================
  # Template Pipeline
  #=========================================================
  - name: deploy-start
    steps:
    - - name: create-namespace-list
        template: create-namespace-list
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "namespace": "istio-system", "label": "name=lma,taco-tls=enabled" },
                { "namespace": "istio-ingress", "label": "istio-injection=enabled,taco-tls=enabled" },
                { "namespace": "lma", "label": "name=lma,taco-tls=enabled" }
              ]

    - - name: eck-operator
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "lma", "path": "eck-operator", "namespace": "elastic-system", "target_cluster": "" }
              ]

    - - name: logging-efk
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "lma", "path": "eck-resource", "namespace": "lma", "target_cluster": "" },
                { "app_group": "lma", "path": "kubernetes-event-exporter", "namespace": "lma", "target_cluster": "" }
              ]

    - - name: create-eck-secret-certs
        template: copy-eck-secret
        arguments:
          parameters:
          - name: secret_name
            value: eck-elasticsearch-es-http-certs-public
          - name: source_namespace
            value: lma
          - name: target_namespace
            value: istio-system

    - - name: deploy
        template: deploy
    
    - - name: sync-app
        template: sync-app

  #=========================================================
  # Template Definition
  #=========================================================
  - name: deploy
    dag:
      tasks:
      - name: istio-base
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "service-mesh", "path": "istio-base-crds", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "istio-base", "namespace": "istio-system", "target_cluster": "" }
                
              ]
      - name: istiod
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "service-mesh", "path": "istiod", "namespace": "istio-system", "target_cluster": "" }
              ]
        dependencies:
        - istio-base
      - name: istio-ingress-gateway
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "service-mesh", "path": "istio-ingress-gateway", "namespace": "istio-ingress", "target_cluster": "" }
              ]
        dependencies:
        - istiod
      - name: jaeger-kiali-operator
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "service-mesh", "path": "jaeger-operator-crds", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "kiali-operator-crds", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "jaeger-operator", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "kiali-operator", "namespace": "istio-system", "target_cluster": "" }
              ]
        dependencies:
        - istiod

      - name: copy-eck-secret
        template: copy-eck-secret
        arguments:
          parameters:
          - name: secret_name
            value: "eck-elasticsearch-es-elastic-user"
          - name: source_namespace
            value: "lma"
          - name: target_namespace
            value: "istio-system"
        dependencies:
        - jaeger-kiali-operator 

      - name: servicemesh-jaeger-kiali-resource
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
            - name: list
              value: |
                [
                  { "app_group": "service-mesh", "path": "servicemesh-jaeger-resource", "namespace": "istio-system", "target_cluster": "" },
                  { "app_group": "service-mesh", "path": "servicemesh-kiali-resource", "namespace": "istio-system", "target_cluster": "" }
                ]
        dependencies:
        - copy-eck-secret

      - name: grafana-prometheus-resource
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { "app_group": "service-mesh", "path": "servicemesh-grafana-dashboard", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "servicemesh-prometheusmonitor", "namespace": "istio-system", "target_cluster": "" },
                { "app_group": "service-mesh", "path": "servicemesh-prometheusrule", "namespace": "istio-system", "target_cluster": "" }
              ]
        dependencies:
        - servicemesh-jaeger-kiali-resource

  - name: create-namespace
    inputs:
      parameters:
      - name: namespace
        value: ""
      - name: label
        value: ""
    container:
      name: create-namespace
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          CLUSTER_ID={{workflow.parameters.cluster_id}}
          kube_params=""
          if [[ -n "${CLUSTER_ID}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig
            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          kubectl $kube_params get ns ${NAMESPACE}
          if [[ $? =~ 1 ]]; then
            kubectl $kube_params create ns ${NAMESPACE}
            IFS=','; for l in ${LABEL}; do kubectl $kube_params label ns ${NAMESPACE} ${l}; done
            log "INFO" "${NAMESPACE} successfully created."
          fi
      env:
      - name: NAMESPACE
        value: '{{inputs.parameters.namespace}}'
      - name: LABEL
        value: '{{inputs.parameters.label}}'
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: create-namespace-list
    inputs:
      parameters:
      - name: list
    steps:
    - - name: create-namespace
        template: create-namespace
        arguments:
          parameters:
          - {name: namespace, value: "{{item.namespace}}"}
          - {name: label, value: "{{item.label}}"}
        withParam: "{{inputs.parameters.list}}"

  - name: copy-eck-secret
    inputs:
      parameters:
      - name: secret_name
        value: "eck-elasticsearch-es-http-certs-public"
      - name: source_namespace
        value: "lma"
      - name: target_namespace
        value: "istio-system"
    container:
      name: copy-eck-secret
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          function log() {
            level=$1
            msg=$2
            date=$(date '+%F %H:%M:%S')
            echo "[$date] $level     $msg"
          }

          CLUSTER_ID={{workflow.parameters.cluster_id}}
          kube_params=""
          if [[ -n "${CLUSTER_ID}" ]]; then
            kube_secret=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
            echo -e "kube_secret:\n$kube_secret" | head -n 5
            cat <<< "$kube_secret" > /etc/kubeconfig
            kube_params+="--kubeconfig=/etc/kubeconfig"
          fi

          until [ $(kubectl $kube_params get secret ${SECRET_NAME} -n ${SOURCE_NAMESPACE} --output name | wc -l) == 1 ]
          do
            echo "Waiting 10 secs for eck to be installed.."
            sleep 10
          done

          kubectl $kube_params delete secret ${SECRET_NAME} -n ${TARGET_NAMESPACE} || true
          kubectl $kube_params get secret ${SECRET_NAME} -n ${SOURCE_NAMESPACE} -o yaml \
            | grep -v '^\s*namespace:\s' \
            | kubectl $kube_params apply -n ${TARGET_NAMESPACE} -f -
            log "INFO" "${SECRET_NAME} successfully created."
      
      env:
      - name: SECRET_NAME
        value: '{{inputs.parameters.secret_name}}'
      - name: SOURCE_NAMESPACE
        value: '{{inputs.parameters.source_namespace}}'
      - name: TARGET_NAMESPACE
        value: '{{inputs.parameters.target_namespace}}'
      resources: {}
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2

  - name: sync-app
    container:
      name: sync-app
      image: harbor-cicd.taco-cat.xyz/tks/argocd:latest
      command:
        - /bin/bash
        - '-c'
        - |
          ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
          --password $ARGO_PASSWORD

          app_label=""
          if [[ -n "{{ workflow.parameters.app_prefix }}" ]]; then
            app_label+="-l app={{ workflow.parameters.app_prefix }}-service-mesh"
          else
            app_label+="-l app=service-mesh"
          fi

          ./argocd app sync $app_label
      envFrom:
        - secretRef:
            name: decapod-argocd-config
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2
